{
  "name": "Bonjour-over-http",
  "tagline": "Http server to find / announce bonjour services",
  "body": "# bonjour-over-http\r\nHttp server to find / announce bonjour services.\r\n\r\nIt provides an API and a binary to install.\r\n\r\n# API\r\n\r\n## Publish services\r\n### POST /publish\r\n\r\nDescription : Publish a service over bonjour.\r\n\r\nFormat : `multipart/form-data`\r\n\r\nData:\r\n```\r\n  if ('name' in req.body)       options.name      = req.body.name\r\n  if ('port' in req.body)       options.port      = req.body.port\r\n  if ('type' in req.body)       options.type      = req.body.type\r\n  if ('host' in req.body)       options.host      = req.body.host\r\n  if ('subtypes' in req.body)   options.subtypes  = req.body.subtypes\r\n  if ('protocol' in req.body)   options.protocol  = req.body.protocol\r\n  if ('txt' in req.body)        options.txt       = req.body.txt\r\n```\r\n\r\nResponse:\r\n```\r\nres[id] = {\r\n  id:         publishedServices[id].id,\r\n  name:       publishedServices[id].name,\r\n  protocol:   publishedServices[id].protocol,\r\n  type:       publishedServices[id].type,\r\n  host:       publishedServices[id].host,\r\n  port:       publishedServices[id].port,\r\n  fqdn:       publishedServices[id].fqdn,\r\n  subtypes:   publishedServices[id].subtypes,\r\n  txt:        publishedServices[id].txt,\r\n  published:  publishedServices[id].published,\r\n}\r\n```\r\n\r\n### GET /published\r\n\r\nDescription : List published services from this server.\r\n\r\nFormat : `-`\r\n\r\nData: `none`\r\n\r\nResponse:\r\n```\r\nres[id] = {\r\n  id:         publishedServices[id].id,\r\n  name:       publishedServices[id].name,\r\n  protocol:   publishedServices[id].protocol,\r\n  type:       publishedServices[id].type,\r\n  host:       publishedServices[id].host,\r\n  port:       publishedServices[id].port,\r\n  fqdn:       publishedServices[id].fqdn,\r\n  subtypes:   publishedServices[id].subtypes,\r\n  txt:        publishedServices[id].txt,\r\n  published:  publishedServices[id].published,\r\n}\r\n```\r\n\r\n### POST /unpublish\r\n\r\nDescription : unpublish previously published service.\r\n\r\nFormat : `multipart/form-data`\r\n\r\nData: `req.body.id`\r\n\r\nResponse: `-`\r\n\r\n### POST /unpublishall\r\n\r\nDescription : unpublish all previously published services.\r\n\r\nFormat : `multipart/form-data`\r\n\r\nData: `-`\r\n\r\nResponse: `-`\r\n\r\n## Browse services\r\n\r\n### POST /findone\r\n\r\nDescription : Find a service through bonjour.\r\n\r\nFormat : `multipart/form-data`\r\n\r\nData:\r\n```\r\nif( 'timeout' in req.body)  reqTimeout  = req.body.timeout\r\nif( 'type' in req.body)     opt.type      = req.body.type\r\nif( 'subtypes' in req.body) opt.subtypes  = req.body.subtypes\r\nif( 'protocol' in req.body) opt.protocol  = req.body.protocol\r\n```\r\nResponse:\r\n```\r\n{\r\n  addresses:  [],\r\n  name:       'whateverelse',\r\n  fqdn:       'whateverelse._someother._tcp.local',\r\n  host:       'linux.local',\r\n  port:       8091,\r\n  type:       'someother',\r\n  protocol:   'tcp',\r\n  subtypes:   [],\r\n  rawTxt:     { type: 'Buffer', data: [0] },\r\n  txt:        {}\r\n}\r\n```\r\n\r\n### POST /find\r\n\r\nDescription : Find services through bonjour.\r\n\r\nFormat : `multipart/form-data`\r\n\r\nData:\r\n```\r\n  if( 'timeout' in req.body)  reqTimeout    = req.body.timeout\r\n  if( 'type' in req.body)     opt.type      = req.body.type\r\n  if( 'subtypes' in req.body) opt.subtypes  = req.body.subtypes\r\n  if( 'protocol' in req.body) opt.protocol  = req.body.protocol\r\n```\r\nResponse:\r\n```\r\n[\r\n  {\r\n    name:       service.name,\r\n    type:       service.type,\r\n    subtypes:   service.subtypes,\r\n    protocol:   service.protocol,\r\n    host:       service.host,\r\n    port:       service.port,\r\n    fqdn:       service.fqdn,\r\n    txt:        service.txt,\r\n    published:  service.published\r\n  }\r\n]\r\n```\r\n\r\n# Binary\r\n\r\n## Usage\r\n\r\n```\r\nbonjour-over-http 1.0.0\r\n  Http server to find / announce bonjour services\r\n\r\nUsage\r\n  bonjour-over-http --config=/path/to/config.json\r\n\r\nOptions\r\n  --config  | -c   Path to the JSON configuration file\r\n  --verbose | -v   Enable verbosity pass in the module list to debug.\r\n\r\nConfig\r\n  The configuration is a plain json object describing several options to\r\n  apply to your instance of bonjour-over-http.\r\n\r\n  {\r\n    \"ssl\": {\r\n      \"port\": \"a number, or null for a random port\",\r\n      \"host\": \"a host value to listen for https requests\",\r\n      \"key\": \"a path to an SSL key\",\r\n      \"ca\": \"a path to the SSL CA file\",\r\n      \"cert\": \"a path to the SSL cert file\"\r\n    },\r\n    \"clear\": {\r\n      \"port\": \"a number, or null for a random port\",\r\n      \"host\": \"a host value to listen for http requests\"\r\n    },\r\n    \"cors\": {\r\n      \"origin\": \"*\",\r\n      \"credentials\": \"true|false\",\r\n      \"methods\": [\"GET\", \"PUT\", \"POST\"],\r\n      \"allowedHeaders\": [\"Content-Type\", \"Authorization\"],\r\n      \"exposedHeaders\": [\"Content-Range\", \"X-Content-Range\"],\r\n      \"maxAge\": 600\r\n    }\r\n  }\r\n```\r\n\r\n# Todos\r\n\r\n- add support for json body request (config switch + implementation + demo)\r\n\r\n# Read more\r\n\r\n- https://github.com/watson/bonjour\r\n- http://expressjs.com/en/api.html\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}